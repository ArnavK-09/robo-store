---
import Navbar from "@/components/navbar.svelte";
import Menu from "@/components/menu.svelte";
import Intiailizing from "@/components/intiailizing.svelte";
import { ViewTransitions } from "astro:transitions";

const { title = "Home" } = Astro.props;
---

<html lang="en">
  <head>
    <ViewTransitions transition:animate="fade" />
    <script>
      import { User } from "@/store/user";
      import {
        storeDetails,
        storeProducts,
        isLoading,
        cart,
      } from "@/store/basics";

      const fetchUser = new Promise(async (resolve) => {
        const response = await fetch("/api/@me");
        if (response.ok) {
          const data = await response.json();
          User.set(data);
        }
        resolve(response);
      });
      const fetchStore = new Promise(async (resolve) => {
        const response = await fetch("/api/store");
        if (response.ok) {
          const data = await response.json();
          storeDetails.set(data);
          window.document.title =
            window.document.title.split("|")[0] +
            ` | ${storeDetails.value.store_name}`;
        }
        resolve(response);
      });

      const fetchProducts = new Promise(async (resolve) => {
        const response = await fetch("/api/store/products");
        if (response.ok) {
          const data = await response.json();
          storeProducts.set(data);
        }
        resolve(response);
      });

      Promise.all([fetchUser, fetchStore, fetchProducts])
        .catch((error) => {
          console.error("Error in one or more requests:", error);
        })
        .finally(() => isLoading.set(false));

      if (!localStorage.getItem("cartItems")) {
        localStorage.setItem("cartItems", "[]");
      } else {
        cart.set(JSON.parse(localStorage.getItem("cartItems")!));
      }

      document.addEventListener("astro:page-load", () => {
        window.document.title =
          window.document.title.split("|")[0] +
          ` | ${storeDetails.value.store_name}`;
      });
    </script>
    <meta charset="utf-8" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 256 256'%3E%3Cpath fill='%23ffffff' d='M231.69 93.81L217.35 43.6A16.07 16.07 0 0 0 202 32H54a16.07 16.07 0 0 0-15.35 11.6L24.31 93.81A8 8 0 0 0 24 96v16a40 40 0 0 0 16 32v72a8 8 0 0 0 8 8h160a8 8 0 0 0 8-8v-72a40 40 0 0 0 16-32V96a8 8 0 0 0-.31-2.19M88 112a24 24 0 0 1-35.12 21.26a8 8 0 0 0-1.82-1.06A24 24 0 0 1 40 112v-8h48Zm64 0a24 24 0 0 1-48 0v-8h48Zm64 0a24 24 0 0 1-11.07 20.2a8 8 0 0 0-1.8 1.05A24 24 0 0 1 168 112v-8h48Z'/%3E%3C/svg%3E"
    />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
  </head>
  <body class="overflow-x-hidden min-h-screen bg-black text-white">
    <header
      class="fixed overflow-x-hidden w-screen grid place-items-center top-1 z-[500]"
    >
      <Navbar client:load />
    </header>
    <Intiailizing client:load />
    <Menu client:load />
    <main class="pt-[100px] pb-20">
      <slot />
    </main>
  </body><style is:global>
    @import url("https://fonts.googleapis.com/css2?family=ADLaM+Display&display=swap");

    * {
      font-family: "ADLaM Display", system-ui;
      font-style: normal;
    }

    .logo-text {
      font-weight: 1000;
      color: black;
      -webkit-text-stroke: 2px white;
    }

    ::-moz-selection {
      color: #000;
      background: #fff;
    }

    ::selection {
      color: #000;
      background: #fff;
    }

    ::-webkit-scrollbar {
      display: none;
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    input[type="number"] {
      -moz-appearance: textfield;
    }
  </style>
</html>
